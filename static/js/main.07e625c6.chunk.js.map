{"version":3,"sources":["components/NavBar/index.js","components/EmojiCard/index.js","components/WinOrLoseCard/index.js","components/EmojiGame/index.js","App.js","index.js"],"names":["NavBar","_Component","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","renderScores","_this$props","props","currentScore","topScore","isGameEnd","_jsxs","className","children","_jsx","_inherits","_createClass","key","value","src","alt","this","Component","EmojiCard","emoji","onClickEmoji","emojiName","emojiUrl","id","onClick","WinOrLoseCard","isWon","onClickPlayAgain","score","imageURL","altText","gameStatus","ScoreLabel","type","EmojiGame","state","clickedEmojis","getShuffledEmojisList","emojisList","sort","Math","random","includes","finishGameAndSetTopScore","setState","prevState","_toConsumableArray","newScore","setIsGameEnd","restartGame","renderWinOrLose","renderEmojiList","shuffledEmojiList","map","emojiItem","_this$state","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"wTAKMA,EAAM,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,YAAA,KAAAH,GAAA,QAAAI,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAkBT,OAlBSP,EAAAQ,YAAA,KAAAV,EAAA,GAAAW,OAAAJ,KAGVK,aAAe,WACb,IAAAC,EAA4CX,EAAKY,MAA1CC,EAAYF,EAAZE,aAAcC,EAAQH,EAARG,SACrB,OADwCH,EAATI,UAEtB,KAGPC,eAAA,OAAKC,UAAU,kBAAiBC,SAAA,CAC9BF,eAAA,KAAGC,UAAU,cAAaC,SAAA,CAAC,WACjBC,cAAA,QAAMF,UAAU,cAAaC,SAAEL,OAEzCG,eAAA,KAAGC,UAAU,cAAaC,SAAA,CAAC,iBACXC,cAAA,QAAMF,UAAU,cAAaC,SAAEJ,SAIrD,EAACd,CAAA,QAAAoB,YAAAtB,EAAAC,GAAAsB,YAAAvB,EAAA,EAAAwB,IAAA,SAAAC,MAED,WACE,OACEP,eAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAC/BF,eAAA,OAAKC,UAAU,uBAAsBC,SAAA,CACnCC,cAAA,OACEF,UAAU,aACVO,IAAI,6DACJC,IAAI,SAENN,cAAA,KAAGF,UAAU,aAAYC,SAAC,kBAE3BQ,KAAKhB,iBAGZ,IAAC,CAlCS,CAASiB,aAqCN7B,ICrCT8B,G,MAAS,SAAA7B,GAAA,SAAA6B,IAAA,OAAA3B,YAAA,KAAA2B,GAAApB,YAAA,KAAAoB,EAAAzB,UAAA,QAAAiB,YAAAQ,EAAA7B,GAAAsB,YAAAO,EAAA,EAAAN,IAAA,SAAAC,MACb,WACE,IAAAZ,EAA8Be,KAAKd,MAA5BiB,EAAKlB,EAALkB,MAAOC,EAAYnB,EAAZmB,aACPC,EAA2BF,EAA3BE,UAAWC,EAAgBH,EAAhBG,SAAUC,EAAMJ,EAANI,GAK5B,OACEd,cAAA,MAAIF,UAAU,aAAaiB,QAJJ,WACvBJ,EAAaG,EACf,EAEuDf,SACnDC,cAAA,OAAcK,IAAKQ,EAAUP,IAAKM,EAAWd,UAAU,eAA7CgB,IAGhB,IAAC,CAbY,CAASN,cAgBTC,ICZTO,G,MAAa,SAAApC,GAAA,SAAAoC,IAAA,OAAAlC,YAAA,KAAAkC,GAAA3B,YAAA,KAAA2B,EAAAhC,UAAA,QAAAiB,YAAAe,EAAApC,GAAAsB,YAAAc,EAAA,EAAAb,IAAA,SAAAC,MAGjB,WACE,IAAAZ,EAAyCe,KAAKd,MAAvCwB,EAAKzB,EAALyB,MAAOC,EAAgB1B,EAAhB0B,iBAAkBC,EAAK3B,EAAL2B,MAC1BC,EAAWH,EARJ,4DACC,6DAQRI,EAAUJ,EAAQ,YAAc,UAChCK,EAAaL,EAAQ,UAAY,WACjCM,EAAaN,EAAQ,aAAe,QAC1C,OACEpB,eAAA,OAAKC,UAAU,sBAAqBC,SAAA,CAClCF,eAAA,OAAKC,UAAU,2BAA0BC,SAAA,CACvCC,cAAA,MAAIF,UAAU,mBAAkBC,SAAEuB,IAClCtB,cAAA,KAAGF,UAAU,kBAAiBC,SAAEwB,IAChC1B,eAAA,KAAGC,UAAU,0BAAyBC,SAAA,CAAEoB,EAAM,SAC9CnB,cAAA,UACEF,UAAU,mBACV0B,KAAK,SACLT,QAASG,EAAiBnB,SAC3B,kBAIHC,cAAA,OAAKF,UAAU,4BAA2BC,SACxCC,cAAA,OAAKF,UAAU,oBAAoBO,IAAKe,EAAUd,IAAKe,QAI/D,IAAC,CA5BgB,CAASb,cA+BbQ,ICrBTS,EAAS,SAAA7C,GAAA,SAAA6C,IAAA,IAAA5C,EAAAC,YAAA,KAAA2C,GAAA,QAAA1C,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAqFZ,OArFYP,EAAAQ,YAAA,KAAAoC,EAAA,GAAAnC,OAAAJ,KAGbwC,MAAQ,CACNC,cAAe,GACf/B,WAAW,EACXD,SAAU,GAIZd,EAEA+C,sBAAwB,WAEtB,OADqB/C,EAAKY,MAAnBoC,WACWC,MAAK,kBAAMC,KAAKC,SAAW,EAAG,GAClD,EAEAnD,EACA8B,aAAe,SAAAG,GACb,IAAOe,EAAchD,EAAKY,MAAnBoC,WACAF,EAAiB9C,EAAK6C,MAAtBC,cACWA,EAAcM,SAASnB,GAEvCjC,EAAKqD,yBAAyBP,EAAc1C,SAExC4C,EAAW5C,OAAS,IAAM0C,EAAc1C,QAC1CJ,EAAKqD,yBAAyBL,EAAW5C,QAE3CJ,EAAKsD,UAAS,SAAAC,GAAS,MAAK,CAC1BT,cAAc,GAADrC,OAAA+C,YAAMD,EAAUT,eAAa,CAAEb,IAC7C,IAEL,EAACjC,EAEDqD,yBAA2B,SAAAI,GAErBA,EADezD,EAAK6C,MAAjB/B,UAELd,EAAKsD,SAAS,CAACxC,SAAU2C,IAE3BzD,EAAK0D,cAAa,EACpB,EAAC1D,EAED2D,YAAc,WACZ3D,EAAKsD,SAAS,CAACR,cAAe,KAC9B9C,EAAK0D,cAAa,EACpB,EAAC1D,EAED0D,aAAe,SAAAnC,GACbvB,EAAKsD,SAAS,CAACvC,UAAWQ,GAC5B,EAEAvB,EACA4D,gBAAkB,WAChB,IAAOZ,EAAchD,EAAKY,MAAnBoC,WACAF,EAAiB9C,EAAK6C,MAAtBC,cACDV,EAAQY,EAAW5C,SAAW0C,EAAc1C,OAIlD,OACEe,cAACgB,EAAa,CACZC,MAAOA,EACPC,iBAAkBrC,EAAK2D,YACvBrB,MAAOQ,EAAc1C,QAG3B,EAEAJ,EAEA6D,gBAAkB,WAChB,IAAMC,EAAoB9D,EAAK+C,wBAC/B,OACE5B,cAAA,MAAIF,UAAU,aAAYC,SAGvB4C,EAAkBC,KAAI,SAAAC,GAAS,OAC9B7C,cAACS,EAAS,CAERC,MAAOmC,EACPlC,aAAc9B,EAAK8B,cAFdkC,EAAU/B,GAGf,KAIV,EAACjC,CAAA,QAAAoB,YAAAwB,EAAA7C,GAAAsB,YAAAuB,EAAA,EAAAtB,IAAA,SAAAC,MAGD,WACE,IAAA0C,EAA6CvC,KAAKmB,MAA3C9B,EAASkD,EAATlD,UAAW+B,EAAamB,EAAbnB,cAAehC,EAAQmD,EAARnD,SAC3BD,EAAeiC,EAAc1C,OACnC,OACEY,eAAA,OAAKC,UAAU,gBAAeC,SAAA,CAE5BC,cAACrB,EAAM,CACLe,aAAcA,EACdC,SAAUA,EACVC,UAAWA,IAGbI,cAAA,OAAKF,UAAU,uBAAsBC,SAClCH,EAAYW,KAAKkC,kBAAoBlC,KAAKmC,sBAInD,IAAC,CAzGY,CAASlC,aA4GTiB,IC3HFI,G,MAAa,CACxB,CACEf,GAAI,EACJF,UAAW,6BACXC,SACE,+EAEJ,CACEC,GAAI,EACJF,UAAW,yBACXC,SACE,2EAEJ,CACEC,GAAI,EACJF,UAAW,iBACXC,SAAU,mEAEZ,CACEC,GAAI,EACJF,UAAW,qBACXC,SACE,uEAEJ,CACEC,GAAI,EACJF,UAAW,4CACXC,SACE,+FAEJ,CACEC,GAAI,EACJF,UAAW,iBACXC,SAAU,mEAEZ,CACEC,GAAI,EACJF,UAAW,oBACXC,SACE,sEAEJ,CACEC,GAAI,EACJF,UAAW,4CACXC,SACE,+FAEJ,CACEC,GAAI,EACJF,UAAW,2BACXC,SACE,6EAEJ,CACEC,GAAI,EACJF,UAAW,+BACXC,SACE,iFAEJ,CACEC,GAAI,GACJF,UAAW,gBACXC,SAAU,kEAEZ,CACEC,GAAI,GACJF,UAAW,8BACXC,SACE,kFAMSkC,EAFH,WAAH,OAAS/C,cAACyB,EAAS,CAACI,WAAYA,GAAc,ECxEvDmB,IAASC,OACPjD,cAACkD,IAAMC,WAAU,CAAApD,SACfC,cAAC+C,EAAG,MAENK,SAASC,eAAe,Q","file":"static/js/main.07e625c6.chunk.js","sourcesContent":["// Write your code here.\n\nimport './index.css'\nimport {Component} from 'react'\n\nclass NavBar extends Component {\n  /* gets top score and current score from EmojiGame page */\n  /* isGameEnd is used decide whether display navbar score card or not  */\n  renderScores = () => {\n    const {currentScore, topScore, isGameEnd} = this.props\n    if (isGameEnd) {\n      return null\n    }\n    return (\n      <div className=\"Score-container\">\n        <p className=\"score-label\">\n          Score : <span className=\"score-value\">{currentScore}</span>\n        </p>\n        <p className=\"score-label\">\n          Total Score : <span className=\"score-value\">{topScore}</span>\n        </p>\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"navbar-container\">\n        <div className=\"logo-title-container\">\n          <img\n            className=\"logo-image\"\n            src=\"https://assets.ccbp.in/frontend/react-js/game-logo-img.png\"\n            alt=\"logo\"\n          />\n          <p className=\"logo-title\">Emoji Game</p>\n        </div>\n        {this.renderScores()}\n      </div>\n    )\n  }\n}\n\nexport default NavBar\n","// Write your code here.\n\nimport './index.css'\nimport {Component} from 'react'\n\nclass EmojiCard extends Component {\n  render() {\n    const {emoji, onClickEmoji} = this.props\n    const {emojiName, emojiUrl, id} = emoji\n    /* onClickEmojiItem sends clicked emoji id to EmojiGame main page  */\n    const onclickEmojiItem = () => {\n      onClickEmoji(id)\n    }\n    return (\n      <li className=\"emoji-item\" onClick={onclickEmojiItem}>\n        <img key={id} src={emojiUrl} alt={emojiName} className=\"emoji-image\" />\n      </li>\n    )\n  }\n}\n\nexport default EmojiCard\n","// Write your code here.\n\nimport './index.css'\nimport {Component} from 'react'\n\n/* on win an and on fail image urls */\nconst winImage = 'https://assets.ccbp.in/frontend/react-js/won-game-img.png'\nconst loseImage = 'https://assets.ccbp.in/frontend/react-js/lose-game-img.png'\n\nclass WinOrLoseCard extends Component {\n  /** onClickPlayAgain is passed as a paramter to onClick event for play Again button */\n  /** we get isWon status from EmojiGame main page  */\n  render() {\n    const {isWon, onClickPlayAgain, score} = this.props\n    const imageURL = isWon ? winImage : loseImage\n    const altText = isWon ? 'happyFace' : 'sadFace'\n    const gameStatus = isWon ? 'You Won' : 'You Lose'\n    const ScoreLabel = isWon ? 'Best Score' : 'Score'\n    return (\n      <div className=\"winOrLose-container\">\n        <div className=\"winOrLose-text-container\">\n          <h1 className=\"winOrLose-status\">{gameStatus}</h1>\n          <p className=\"winOrLose-label\">{ScoreLabel}</p>\n          <p className=\"winOrLose-current-score\">{score}/12</p>\n          <button\n            className=\"winOrLose-button\"\n            type=\"button\"\n            onClick={onClickPlayAgain}\n          >\n            Play Again\n          </button>\n        </div>\n        <div className=\"winOrLose-image-container\">\n          <img className=\"win-or-lose-image\" src={imageURL} alt={altText} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default WinOrLoseCard\n","/* \nQuick Tip \n\n- Use the below function in the EmojiGame Component to shuffle the emojisList every time when an emoji is clicked.\n\nconst shuffledEmojisList = () => {\n  const {emojisList} = this.props\n  return emojisList.sort(() => Math.random() - 0.5)\n}\n\n*/\n\n// Write your code here.\nimport './index.css'\nimport {Component} from 'react'\nimport NavBar from '../NavBar/index'\nimport EmojiCard from '../EmojiCard/index'\nimport WinOrLoseCard from '../WinOrLoseCard/index'\n\nclass EmojiGame extends Component {\n  /* state has 3 properties which specify top score, array of clicked emojis details and also \n    whether gave is over or not if same emoji is clicked/ not clicked respectively */\n  state = {\n    clickedEmojis: [],\n    isGameEnd: false,\n    topScore: 0,\n  }\n\n  /* a method that shuffles the emojis order randomly  */\n  /* this method gets called each time a emoji is clicked since state gets\n   updates each time a emoji is clicked. SO after every click emojis get shuffled randomly */\n  getShuffledEmojisList = () => {\n    const {emojisList} = this.props\n    return emojisList.sort(() => Math.random() - 0.5)\n  }\n\n  /* a method for actions to happen when a emoji is clicked  */\n  onClickEmoji = id => {\n    const {emojisList} = this.props\n    const {clickedEmojis} = this.state\n    const isPresent = clickedEmojis.includes(id)\n    if (isPresent) {\n      this.finishGameAndSetTopScore(clickedEmojis.length)\n    } else {\n      if (emojisList.length - 1 === clickedEmojis.length) {\n        this.finishGameAndSetTopScore(emojisList.length)\n      }\n      this.setState(prevState => ({\n        clickedEmojis: [...prevState.clickedEmojis, id],\n      }))\n    }\n  }\n\n  finishGameAndSetTopScore = newScore => {\n    const {topScore} = this.state\n    if (newScore > topScore) {\n      this.setState({topScore: newScore})\n    }\n    this.setIsGameEnd(true)\n  }\n\n  restartGame = () => {\n    this.setState({clickedEmojis: []})\n    this.setIsGameEnd(false)\n  }\n\n  setIsGameEnd = value => {\n    this.setState({isGameEnd: value})\n  }\n\n  /* a render application to display score once we win/lose the game  */\n  renderWinOrLose = () => {\n    const {emojisList} = this.props\n    const {clickedEmojis} = this.state\n    const isWon = emojisList.length === clickedEmojis.length\n    /* we will be sending current score since it is to be displayed one score card is displayed */\n    /* for onClick of play Again button \"onClickPlayAgain\" is passed so onv=ce the button is clicked \n    the game gets restated again keeping top score undisturbed  */\n    return (\n      <WinOrLoseCard\n        isWon={isWon}\n        onClickPlayAgain={this.restartGame}\n        score={clickedEmojis.length}\n      />\n    )\n  }\n\n  /* render emojis list method gets emojis shuffled list and display \n  each Emoji by sending data to EmojiCard */\n  renderEmojiList = () => {\n    const shuffledEmojiList = this.getShuffledEmojisList()\n    return (\n      <ul className=\"emoji-list\">\n        {/* each item should have a key. we use onClickEmoji method to get the id of clicked emoji from \n        Emoji Card files */}\n        {shuffledEmojiList.map(emojiItem => (\n          <EmojiCard\n            key={emojiItem.id}\n            emoji={emojiItem}\n            onClickEmoji={this.onClickEmoji}\n          />\n        ))}\n      </ul>\n    )\n  }\n\n  /* main render method of EmojiGame application  */\n  render() {\n    const {isGameEnd, clickedEmojis, topScore} = this.state\n    const currentScore = clickedEmojis.length\n    return (\n      <div className=\"app-container\">\n        {/* current score, top score and gameEnd status is passed to navbar */}\n        <NavBar\n          currentScore={currentScore}\n          topScore={topScore}\n          isGameEnd={isGameEnd}\n        />\n        {/* if game is ended display whether wim/lose status or pif not play the game  */}\n        <div className=\"emoji-body-container\">\n          {isGameEnd ? this.renderWinOrLose() : this.renderEmojiList()}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default EmojiGame\n","import EmojiGame from './components/EmojiGame'\n\nimport './App.css'\n\nexport const emojisList = [\n  {\n    id: 0,\n    emojiName: 'Face with stuck out tongue',\n    emojiUrl:\n      'https://assets.ccbp.in/frontend/react-js/face-with-stuck-out-tongue-img.png',\n  },\n  {\n    id: 1,\n    emojiName: 'Face with head bandage',\n    emojiUrl:\n      'https://assets.ccbp.in/frontend/react-js/face-with-head-bandage-img.png',\n  },\n  {\n    id: 2,\n    emojiName: 'Face with hugs',\n    emojiUrl: 'https://assets.ccbp.in/frontend/react-js/face-with-hugs-img.png',\n  },\n  {\n    id: 3,\n    emojiName: 'Face with laughing',\n    emojiUrl:\n      'https://assets.ccbp.in/frontend/react-js/face-with-laughing-img.png',\n  },\n  {\n    id: 4,\n    emojiName: 'Laughing face with hand in front of mouth',\n    emojiUrl:\n      'https://assets.ccbp.in/frontend/react-js/face-with-laughing-with-hand-infront-mouth-img.png',\n  },\n  {\n    id: 5,\n    emojiName: 'Face with mask',\n    emojiUrl: 'https://assets.ccbp.in/frontend/react-js/face-with-mask-img.png',\n  },\n  {\n    id: 6,\n    emojiName: 'Face with silence',\n    emojiUrl:\n      'https://assets.ccbp.in/frontend/react-js/face-with-silence-img.png',\n  },\n  {\n    id: 7,\n    emojiName: 'Face with stuck out tongue and winked eye',\n    emojiUrl:\n      'https://assets.ccbp.in/frontend/react-js/face-with-stuck-out-tongue-and-winking-eye-img.png',\n  },\n  {\n    id: 8,\n    emojiName: 'Grinning face with sweat',\n    emojiUrl:\n      'https://assets.ccbp.in/frontend/react-js/grinning-face-with-sweat-img.png',\n  },\n  {\n    id: 9,\n    emojiName: 'Smiling face with heart eyes',\n    emojiUrl:\n      'https://assets.ccbp.in/frontend/react-js/smiling-face-with-heart-eyes-img.png',\n  },\n  {\n    id: 10,\n    emojiName: 'Grinning face',\n    emojiUrl: 'https://assets.ccbp.in/frontend/react-js/grinning-face-img.png',\n  },\n  {\n    id: 11,\n    emojiName: 'Smiling face with star eyes',\n    emojiUrl:\n      'https://assets.ccbp.in/frontend/react-js/smiling-face-with-star-eyes-img.png',\n  },\n]\n\nconst App = () => <EmojiGame emojisList={emojisList} />\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}